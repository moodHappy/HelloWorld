name: Schedule File Deletion (Triggered by UI Upload)

on:
  repository_dispatch: # <--- 关键修改1: 改为监听 repository_dispatch 事件
    types: [file-upload-delete-schedule] # <--- 关键修改2: 匹配前端发送的事件类型

jobs:
  schedule_deletion: # <--- 任务名称改为更贴切的 schedule_deletion
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Calculate deletion timestamp
        id: calculate_time
        run: |
          # <--- 关键修改3: 从 client_payload 获取 delete_after_seconds
          DELETION_TIMESTAMP=$(( $(date +%s) + ${{ github.event.client_payload.delete_after_seconds }} ))
          echo "DELETION_TIMESTAMP=${DELETION_TIMESTAMP}" >> $GITHUB_ENV

      # <--- 关键修改4: 移除 Decode file content 步骤
      # 因为前端已经上传了文件，这个 Action 不需要再解码文件内容来上传了。
      # 它的职责是接收前端已上传的文件信息，并调度删除。
      # 如果你的前端没有直接上传，而是把 Base64 内容传给 Action 来上传，那这一步是需要的。
      # 根据我们之前的约定，前端是直接上传的，所以这里不再需要。

      - name: Get existing SHA (if file exists)
        id: get_sha
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          # <--- 关键修改5: 从 client_payload 获取文件路径
          FILE_PATH="${{ github.event.client_payload.file_path }}"
          API_URL="https://api.github.com/repos/${{ github.repository }}/contents/${FILE_PATH}"
          RESPONSE=$(curl -s -H "Authorization: token $GH_TOKEN" "$API_URL")
          # Use jq to safely extract .sha; if not found, output empty string
          SHA=$(echo "$RESPONSE" | jq -r '.sha // empty')
          echo "EXISTING_SHA=$SHA" >> $GITHUB_ENV
        continue-on-error: true # Allow this step to fail if file doesn't exist (e.g., 404 Not Found)

      # <--- 关键修改6: 移除 Upload file to GitHub 步骤
      # 同样，因为文件已经通过前端上传，Action 的主要任务是调度删除，而不是再次上传。
      # 我们可以利用前端提供的 file_sha_at_upload。
      # 如果你希望 Action 再次确认文件存在或获取最新 SHA，可以保留此步骤，
      # 但逻辑上，既然前端已经成功上传，Actions 只需要利用前端给的 SHA 进行 Issue 记录即可。
      # 为了简化和配合前端的"上传并调度"模型，我们让前端提供上传时的SHA。

      - name: Create or update deletion schedule issue
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            // <--- 关键修改7: 从 client_payload 获取文件路径和上传时的 SHA
            const filePath = '${{ github.event.client_payload.file_path }}';
            const fileSha = '${{ github.event.client_payload.file_sha_at_upload }}'; // 从前端传递的 SHA
            const deletionTimestamp = process.env.DELETION_TIMESTAMP; // 从 calculate_time 步骤获取
            const repoOwner = context.repo.owner;
            const repoName = context.repo.repo;
            const branch = context.ref.replace('refs/heads/', ''); // 获取当前分支名 (e.g., master or main)
            
            // 构造原始文件链接（基于前端上传的路径和仓库信息）
            const githubPageLink = `https://github.com/${repoOwner}/${repoName}/blob/${branch}/${filePath}`;
            const rawUrl = `https://raw.githubusercontent.com/${repoOwner}/${repoName}/${branch}/${filePath}`;

            const issueTitle = `Scheduled Deletion for ${filePath}`;
            const issueBody = `
            This issue tracks a scheduled file deletion.
            
            **File Path:** \`${filePath}\`
            **File SHA (at upload):** \`${fileSha}\`
            **GitHub View Link:** <a href="${githubPageLink}" target="_blank">${githubPageLink}</a>
            **Raw URL (for direct download):** <a href="${rawUrl}" target="_blank">${rawUrl}</a>
            **Delete By Timestamp (Unix):** \`${deletionTimestamp}\`
            
            This issue will be closed automatically when the file is deleted by the scheduled GitHub Action.
            `;

            console.log(`Preparing to create/update issue for: ${filePath}, to be deleted by timestamp: ${deletionTimestamp}`);

            // Search for existing open issue with this specific title
            const searchResult = await github.rest.search.issuesAndPullRequests({
              q: `in:title "${issueTitle}" repo:${repoOwner}/${repoName} type:issue state:open`
            });

            if (searchResult.data.items.length > 0) {
              const existingIssue = searchResult.data.items[0];
              console.log(`Found existing issue #${existingIssue.number} for ${filePath}. Updating it.`);
              await github.rest.issues.update({
                owner: repoOwner,
                repo: repoName,
                issue_number: existingIssue.number,
                body: issueBody
              });
            } else {
              console.log(`No existing issue found for ${filePath}. Creating a new one.`);
              await github.rest.issues.create({
                owner: repoOwner,
                repo: repoName,
                title: issueTitle,
                body: issueBody,
                labels: ['auto-delete'] // 添加标签方便管理
              });
            }
