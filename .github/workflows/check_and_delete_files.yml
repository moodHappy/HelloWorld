name: Auto Delete Expired Files

on:
  schedule:
    # 每分钟执行一次
    - cron: "*/1 * * * *"
  workflow_dispatch: # 支持手动触发

jobs:
  delete_expired_files:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Run delete script
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          REPO: ${{ github.repository }}
        run: |
          node << 'EOF'
          const fs = require('fs');
          const path = require('path');
          const fetch = require('node-fetch');

          const filePath = path.join(process.cwd(), 'pending_deletion.json');

          if (!fs.existsSync(filePath)) {
            console.log("pending_deletion.json 文件不存在，退出");
            process.exit(0);
          }

          const dataRaw = fs.readFileSync(filePath, 'utf-8');
          let pendingList = JSON.parse(dataRaw);

          if (!Array.isArray(pendingList) || pendingList.length === 0) {
            console.log("pending_deletion.json 内容为空或格式不对，退出");
            process.exit(0);
          }

          const now = Date.now();
          const expiredItems = pendingList.filter(item => item.deleteAt <= now);
          if (expiredItems.length === 0) {
            console.log("没有到期需要删除的文件");
            process.exit(0);
          }

          const token = process.env.GITHUB_TOKEN;
          const repo = process.env.REPO;
          const [owner, repoName] = repo.split('/');

          async function deleteFile(item) {
            const url = `https://api.github.com/repos/${owner}/${repoName}/contents/${encodeURIComponent(item.path)}`;
            const body = {
              message: `Auto delete expired file: ${item.path}`,
              sha: item.sha,
              branch: 'master' // 根据你的默认分支改为 master 或 main
            };

            const res = await fetch(url, {
              method: 'DELETE',
              headers: {
                Authorization: `token ${token}`,
                'Content-Type': 'application/json'
              },
              body: JSON.stringify(body)
            });

            if (res.ok) {
              console.log(`✅ 删除成功: ${item.path}`);
              return true;
            } else {
              const err = await res.json();
              console.error(`❌ 删除失败: ${item.path} - ${res.status} ${err.message}`);
              return false;
            }
          }

          async function getFileSha(path) {
            const url = `https://api.github.com/repos/${owner}/${repoName}/contents/${encodeURIComponent(path)}`;
            const res = await fetch(url, {
              headers: { Authorization: `token ${token}` }
            });
            if (res.ok) {
              const data = await res.json();
              return data.sha;
            } else {
              console.error(`获取文件 sha 失败: ${path}`);
              return null;
            }
          }

          async function main() {
            for (let item of expiredItems) {
              const latestSha = await getFileSha(item.path);
              if (!latestSha) {
                console.log(`跳过删除（找不到文件）: ${item.path}`);
                continue;
              }
              item.sha = latestSha;

              const success = await deleteFile(item);
              if (success) {
                pendingList = pendingList.filter(i => i.path !== item.path);
              }
            }

            fs.writeFileSync(filePath, JSON.stringify(pendingList, null, 2), 'utf-8');
            console.log("更新 pending_deletion.json 完成");
          }

          main().catch(err => {
            console.error(err);
            process.exit(1);
          });
          EOF