<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>GitHub ÂêåÊ≠•Âä©Êâã</title>
  <style>
    /* CSS Variables for theming and typography */
    :root {
      --bg-color: #f9f9f9;
      --text-color: #222;
      --textarea-bg-color: #fff;
      --textarea-border-color: #ccc;
      --article-bg-color: #fff;
      --article-border-color: #ccc;
      --status-color: #444;
      --button-primary-bg: #4CAF50;
      --button-secondary-bg: #2196F3;
      --button-danger-bg: #f44336;
      --modal-bg: rgba(0,0,0,0.5);
      --modal-content-bg: #fff;
      --input-border-color: #aaa;
      --settings-icon-color: #333;

      --primary-font: 'Helvetica Neue', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', sans-serif;
      --font-size: 17px;
      --line-height: 1.6;
    }

    /* Dark Theme */
    body.theme-dark {
      --bg-color: #121212;
      --text-color: #e0e0e0;
      --textarea-bg-color: #1e1e1e;
      --textarea-border-color: #444;
      --article-bg-color: #1e1e1e;
      --article-border-color: #444;
      --status-color: #aaa;
      --modal-content-bg: #2d2d2d;
      --input-border-color: #555;
      --settings-icon-color: #ccc;
    }

    /* Sepia Theme */
    body.theme-sepia {
      --bg-color: #f4f0e8;
      --text-color: #5b4636;
      --textarea-bg-color: #fdfaf3;
      --textarea-border-color: #dcd3c3;
      --article-bg-color: #fdfaf3;
      --article-border-color: #dcd3c3;
      --status-color: #5b4636;
      --modal-content-bg: #fdfaf3;
      --input-border-color: #c9bca8;
      --settings-icon-color: #5b4636;
    }

    body {
      font-family: var(--primary-font);
      background: var(--bg-color);
      color: var(--text-color);
      padding: 1em;
      transition: background-color 0.3s, color 0.3s;
    }

    textarea, article.immersive-content {
      width: 100%;
      box-sizing: border-box;
      border-radius: 8px;
      padding: 12px;
      font-size: var(--font-size);
      line-height: var(--line-height);
      background-color: var(--article-bg-color);
      border: 1px solid var(--article-border-color);
      color: var(--text-color);
      transition: background-color 0.3s, color 0.3s, border-color 0.3s;
    }

    textarea {
      min-height: 150px;
      resize: vertical;
      overflow: hidden; /* Hide scrollbar, but still scrollable */
      background-color: var(--textarea-bg-color);
      border-color: var(--textarea-border-color);
    }

    button {
      margin: 6px 6px 6px 0;
      padding: 10px 16px;
      font-size: 16px;
      border-radius: 6px;
      border: none;
      color: white;
      cursor: pointer;
      background-color: var(--button-primary-bg);
    }
    button.copy { background-color: var(--button-secondary-bg); }
    button.delete { background-color: var(--button-danger-bg); }

    #status {
      margin-top: 10px;
      color: var(--status-color);
      font-size: 14px;
    }

    #settings-icon {
      position: absolute;
      top: 10px;
      right: 15px;
      font-size: 24px;
      cursor: pointer;
      color: var(--settings-icon-color);
    }

    /* Modal Styles */
    .modal {
      position: fixed;
      top: 0; left: 0;
      width: 100%; height: 100%;
      background: var(--modal-bg);
      display: none; /* Initially hidden */
      justify-content: center;
      align-items: center;
      z-index: 999;
    }
    .modal-content {
      background: var(--modal-content-bg);
      color: var(--text-color);
      padding: 20px;
      border-radius: 8px;
      width: 90%;
      max-width: 400px;
    }
    .modal-content h3 {
      margin-top: 0;
    }
    .modal-content input, .modal-content select {
      width: 100%;
      padding: 10px;
      margin-top: 10px;
      font-size: 16px;
      border-radius: 5px;
      border: 1px solid var(--input-border-color);
      background-color: var(--textarea-bg-color);
      color: var(--text-color);
      box-sizing: border-box;
    }
    .modal-content label {
      display: block;
      margin-top: 15px;
      font-size: 14px;
      color: var(--status-color);
    }

    article.immersive-content {
      line-height: var(--line-height);
      font-size: var(--font-size);
    }
    article.immersive-content p {
      margin-bottom: 1em;
      white-space: pre-wrap;
    }
  </style>
</head>
<body>
  <div id="settings-icon" title="ËÆæÁΩÆ" onclick="openSettingsModal()">‚öôÔ∏è</div>
  <h2>üì§ GitHub ÂêåÊ≠•Âä©Êâã</h2>

  <div>
    <button onclick="submitContent()">Êèê‰∫§</button>
    <button class="delete" onclick="deleteContent()">Âà†Èô§</button>
    <button class="copy" onclick="copyContent()">Â§çÂà∂</button>
  </div>

  <textarea id="inputContent" placeholder="ËØ∑ËæìÂÖ•Ëã±ÊñáÊñáÊú¨ÔºàÊîØÊåÅÂ§öÊÆµÔºåÊØèÊÆµÁî®Á©∫Ë°åÂàÜÈöîÔºâ..."></textarea>
  <article id="renderedContent" class="immersive-content" style="display:none;"></article>

  <div id="status">‚è≥ Ê≠£Âú®ÂàùÂßãÂåñ...</div>

  <div id="tokenModal" class="modal">
    <div class="modal-content">
      <h3>üîê ËØ∑ËæìÂÖ•‰Ω†ÁöÑ GitHub TokenÔºö</h3>
      <input type="password" id="tokenInput" placeholder="ghp_xxx Êàñ github_pat_xxx" />
      <button style="margin-top:10px;" onclick="saveToken()">‰øùÂ≠ò Token</button>
    </div>
  </div>

  <div id="settingsModal" class="modal">
    <div class="modal-content">
      <h3>‚öôÔ∏è ‰∏™ÊÄßÂåñËÆæÁΩÆ</h3>

      <label for="theme-select">ÁïåÈù¢‰∏ªÈ¢ò</label>
      <select id="theme-select">
        <option value="">ÈªòËÆ§ (‰∫ÆËâ≤)</option>
        <option value="theme-dark">Êä§Áúº (ÊöóËâ≤)</option>
        <option value="theme-sepia">Á∫∏Âº† (Á±≥Ëâ≤)</option>
      </select>

      <label for="font-family-select">ÈòÖËØªÂ≠ó‰Ωì</label>
      <select id="font-family-select">
        <option value="'Helvetica Neue', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', sans-serif">Êó†Ë°¨Á∫ø‰Ωì (ÈªòËÆ§)</option>
        <option value="'Georgia', 'Noto Serif SC', 'Songti SC', serif">Ë°¨Á∫ø‰Ωì</option>
        <option value="'Courier New', 'SFMono-Regular', 'Consolas', monospace">Á≠âÂÆΩÂ≠ó‰Ωì</option>
      </select>

      <label for="font-size-select">ÂÜÖÂÆπÂ≠óÂè∑</label>
      <select id="font-size-select">
          <option value="15px">Â∞è</option>
          <option value="17px">‰∏≠ (ÈªòËÆ§)</option>
          <option value="19px">Â§ß</option>
          <option value="21px">ÁâπÂ§ß</option>
      </select>

      <label for="line-height-select">ÊÆµËêΩË°åÈ´ò</label>
      <select id="line-height-select">
          <option value="1.4">Á¥ßÂáë</option>
          <option value="1.6">ÈÄÇ‰∏≠ (ÈªòËÆ§)</option>
          <option value="1.8">ÂÆΩÊùæ</option>
      </select>

      <hr style="border: 0; border-top: 1px solid var(--textarea-border-color); margin: 20px 0;">

      <button class="delete" onclick="resetToken()">ÈáçËÆæ GitHub Token</button>
      <button style="margin-top:10px; float: right;" onclick="saveAndApplySettings()">‰øùÂ≠òÂπ∂ÂÖ≥Èó≠</button>
    </div>
  </div>


  <script>
    const GITHUB_USERNAME = "moodHappy";
    const GITHUB_REPO = "HelloWorld";
    const WORD_FILE_PATH_GITHUB = "Notes/transfer.txt";
    const SETTINGS_KEY = "github_sync_assistant_settings";

    let GITHUB_TOKEN = localStorage.getItem("github_token") || null;
    const apiUrl = `https://api.github.com/repos/${GITHUB_USERNAME}/${GITHUB_REPO}/contents/${WORD_FILE_PATH_GITHUB}`;

    const textarea = document.getElementById("inputContent");
    const renderedDiv = document.getElementById("renderedContent");
    const statusDiv = document.getElementById("status");
    const tokenModal = document.getElementById("tokenModal");
    const settingsModal = document.getElementById("settingsModal");
    const rootElement = document.documentElement;

    // --- Settings Management ---
    const defaultSettings = {
        theme: '',
        fontFamily: "'Helvetica Neue', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', sans-serif",
        fontSize: '17px',
        lineHeight: '1.6'
    };

    function applySettings(settings) {
        document.body.className = settings.theme || '';
        rootElement.style.setProperty('--primary-font', settings.fontFamily);
        rootElement.style.setProperty('--font-size', settings.fontSize);
        rootElement.style.setProperty('--line-height', settings.lineHeight);
    }

    function loadSettings() {
        const savedSettings = JSON.parse(localStorage.getItem(SETTINGS_KEY));
        const currentSettings = { ...defaultSettings, ...savedSettings };
        applySettings(currentSettings);
    }

    function openSettingsModal() {
        const savedSettings = JSON.parse(localStorage.getItem(SETTINGS_KEY)) || defaultSettings;
        document.getElementById('theme-select').value = savedSettings.theme;
        document.getElementById('font-family-select').value = savedSettings.fontFamily;
        document.getElementById('font-size-select').value = savedSettings.fontSize;
        document.getElementById('line-height-select').value = savedSettings.lineHeight;
        settingsModal.style.display = "flex";
    }

    function closeSettingsModal() {
        settingsModal.style.display = "none";
    }

    function saveAndApplySettings() {
        const newSettings = {
            theme: document.getElementById('theme-select').value,
            fontFamily: document.getElementById('font-family-select').value,
            fontSize: document.getElementById('font-size-select').value,
            lineHeight: document.getElementById('line-height-select').value
        };
        localStorage.setItem(SETTINGS_KEY, JSON.stringify(newSettings));
        applySettings(newSettings);
        closeSettingsModal();
        statusDiv.textContent = "‚öôÔ∏è ËÆæÁΩÆÂ∑≤‰øùÂ≠ò„ÄÇ";
    }


    // --- GitHub Token Management ---
    function ensureToken() {
      if (!GITHUB_TOKEN) {
        tokenModal.style.display = "flex";
      }
    }

    function saveToken() {
      const token = document.getElementById("tokenInput").value.trim();
      if (!token.startsWith("ghp_") && !token.startsWith("github_pat_")) {
        alert("ËØ∑ËæìÂÖ•ÊúâÊïàÁöÑ GitHub TokenÔºÅ");
        return;
      }
      localStorage.setItem("github_token", token);
      GITHUB_TOKEN = token;
      tokenModal.style.display = "none";
      statusDiv.textContent = "‚è≥ Ê≠£Âú®Âä†ËΩΩ GitHub ÂÜÖÂÆπ...";
      loadContent();
    }

    function resetToken() {
      if (confirm("Á°ÆÂÆöË¶ÅÊ∏ÖÈô§Â∑≤‰øùÂ≠òÁöÑ GitHub Token Âπ∂ÈáçÊñ∞ËæìÂÖ•ÂêóÔºü")) {
        localStorage.removeItem("github_token");
        GITHUB_TOKEN = null;
        closeSettingsModal();
        ensureToken();
      }
    }

    // --- Core GitHub API Functions ---
    function getHeaders() {
      return {
        Authorization: `Bearer ${GITHUB_TOKEN}`,
        Accept: "application/vnd.github.v3+json"
      };
    }

    async function getCurrentFileShaAndContent() {
      try {
        const res = await fetch(apiUrl, { headers: getHeaders() });
        if (res.status === 404) {
             statusDiv.textContent = "‚ÑπÔ∏è ÁõÆÊ†áÊñá‰ª∂‰∏çÂ≠òÂú®ÔºåÊèê‰∫§Êó∂Â∞ÜËá™Âä®ÂàõÂª∫„ÄÇ";
             return { sha: null, content: "" };
        }
        if (!res.ok) throw new Error(`GitHub Áä∂ÊÄÅÁ†Å ${res.status}`);
        const data = await res.json();
        const decoded = decodeURIComponent(escape(atob(data.content)));
        return { sha: data.sha, content: decoded };
      } catch (err) {
        console.warn("ËØªÂèñÂ§±Ë¥•Ôºö", err.message);
        statusDiv.textContent = `‚ùå ËØªÂèñÂ§±Ë¥•: ${err.message}. ËØ∑Ê£ÄÊü• Token ÊàñÁΩëÁªú„ÄÇ`;
        return { sha: null, content: "" };
      }
    }

    async function submitContent() {
      const content = textarea.value.trim();
      if (!content) return alert("ËØ∑ËæìÂÖ•ÂÜÖÂÆπÂÜçÊèê‰∫§ÔºÅ");
      statusDiv.textContent = "üîÑ Ê≠£Âú®Êèê‰∫§Âà∞ GitHub...";

      const { sha } = await getCurrentFileShaAndContent();
      const encodedContent = btoa(unescape(encodeURIComponent(content)));

      const res = await fetch(apiUrl, {
        method: "PUT",
        headers: { ...getHeaders(), "Content-Type": "application/json" },
        body: JSON.stringify({
          message: `Update ${WORD_FILE_PATH_GITHUB}`,
          content: encodedContent,
          committer: { name: "GitHub Sync Assistant", email: "bot@example.com" },
          ...(sha ? { sha } : {})
        })
      });

      if (res.ok) {
        renderMode(content);
        statusDiv.textContent = "‚úÖ Êèê‰∫§ÊàêÂäüÔºåÊÆµËêΩÂ∑≤Ê∏≤Êüì„ÄÇ";
      } else {
        statusDiv.textContent = "‚ùå Êèê‰∫§Â§±Ë¥•Ôºö" + (await res.json()).message;
      }
    }

    async function deleteContent() {
      if (!confirm("Á°ÆÂÆöË¶ÅÊ∏ÖÁ©∫ GitHub ‰∏äÁöÑÊñá‰ª∂ÂÜÖÂÆπÂêóÔºüÊ≠§Êìç‰Ωú‰∏çÂèØÈÄÜ„ÄÇ")) return;

      statusDiv.textContent = "üóëÔ∏è Ê≠£Âú®Ê∏ÖÁ©∫ GitHub Êñá‰ª∂...";
      const { sha } = await getCurrentFileShaAndContent();
      if (!sha) {
        textarea.value = "";
        editMode();
        statusDiv.textContent = "‚úÖ Êñá‰ª∂Êú¨Â∞±‰∏∫Á©∫Êàñ‰∏çÂ≠òÂú®„ÄÇ";
        return;
      }

      const res = await fetch(apiUrl, {
        method: "PUT",
        headers: { ...getHeaders(), "Content-Type": "application/json" },
        body: JSON.stringify({
          message: `Empty ${WORD_FILE_PATH_GITHUB}`,
          content: btoa(""),
          sha,
          committer: { name: "GitHub Sync Assistant", email: "bot@example.com" }
        })
      });

      if (res.ok) {
        textarea.value = "";
        editMode();
        statusDiv.textContent = "‚úÖ GitHub ÂÜÖÂÆπÂ∑≤Ê∏ÖÁ©∫„ÄÇ";
      } else {
        statusDiv.textContent = "‚ùå Âà†Èô§Â§±Ë¥•Ôºö" + (await res.json()).message;
      }
    }

    // --- UI & Content Handling ---
    function copyContent() {
      const content = renderedDiv.style.display !== "none" ? renderedDiv.innerText : textarea.value;
      if (!content) {
        statusDiv.textContent = "ü§∑‚Äç‚ôÄÔ∏è ÂÜÖÂÆπ‰∏∫Á©∫ÔºåÊó†ÈúÄÂ§çÂà∂„ÄÇ";
        return;
      }
      navigator.clipboard.writeText(content);
      statusDiv.textContent = "üìã ÂÜÖÂÆπÂ∑≤Â§çÂà∂Âà∞Ââ™Ë¥¥Êùø„ÄÇ";
    }

    function renderMode(text) {
      renderedDiv.innerHTML = ""; // Clear previous content
      const paragraphs = text.split(/\n{2,}/); // Split by one or more empty lines
      for (const para of paragraphs) {
        if (para.trim()) {
          const p = document.createElement("p");
          p.textContent = para.trim();
          renderedDiv.appendChild(p);
        }
      }
      renderedDiv.style.display = "block";
      textarea.style.display = "none";
    }

    function editMode() {
      textarea.style.display = "block";
      renderedDiv.style.display = "none";
    }

    async function loadContent() {
      statusDiv.textContent = "‚è≥ Ê≠£Âú®Âä†ËΩΩ GitHub ÂÜÖÂÆπ...";
      const { content } = await getCurrentFileShaAndContent();
      if (content.trim()) {
        textarea.value = content; // Pre-fill textarea in case user wants to edit
        renderMode(content);
        statusDiv.textContent = "‚úÖ GitHub ÂÜÖÂÆπÂ∑≤Âä†ËΩΩÂπ∂Ê∏≤Êüì„ÄÇ";
      } else {
        textarea.value = "";
        editMode();
        statusDiv.textContent = "‚úÖ GitHub ÂÜÖÂÆπ‰∏∫Á©∫ÔºåËØ∑ÁºñËæë„ÄÇ";
      }
    }

    // --- Initial Load ---
    window.onload = () => {
      loadSettings();
      ensureToken();
      if (GITHUB_TOKEN) {
        loadContent();
      } else {
        statusDiv.textContent = "üëã Ê¨¢Ëøé‰ΩøÁî®ÔºÅËØ∑ËæìÂÖ• GitHub Token ‰ª•ÂºÄÂßã„ÄÇ";
      }
    };
  </script>
</body>
</html>

ËÆ∞‰ΩèËøô‰∏™‰ª£Á†ÅÔºåÂÆÉÁé∞Âú®ËÉΩÂêåÊ≠•ÊñáÂ≠ó„ÄÇÂõûÂ§çÂ•ΩÁöÑ