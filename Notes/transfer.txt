1（1（可是可是。
<!DOCTYPE html>
<html lang="zh">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>GitHub 文件同步助手</title>
  <style>
    /* CSS Variables for theming and typography */
    :root {
      --bg-color: #f9f9f9;
      --text-color: #222;
      --textarea-bg-color: #fff;
      --textarea-border-color: #ccc;
      --article-bg-color: #fff;
      --article-border-color: #ccc;
      --status-color: #444;
      --button-primary-bg: #4CAF50;
      --button-secondary-bg: #2196F3;
      --button-danger-bg: #f44336;
      --modal-bg: rgba(0,0,0,0.5);
      --modal-content-bg: #fff;
      --input-border-color: #aaa;
      --settings-icon-color: #333;
      --log-color: green; /* New: for log messages */

      --primary-font: 'Helvetica Neue', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', sans-serif;
      --font-size: 17px;
      --line-height: 1.6;
    }

    /* Dark Theme */
    body.theme-dark {
      --bg-color: #121212;
      --text-color: #e0e0e0;
      --textarea-bg-color: #1e1e1e;
      --textarea-border-color: #444;
      --article-bg-color: #1e1e1e;
      --article-border-color: #444;
      --status-color: #aaa;
      --modal-content-bg: #2d2d2d;
      --input-border-color: #555;
      --settings-icon-color: #ccc;
      --log-color: #90EE90; /* Light green for dark theme */
    }

    /* Sepia Theme */
    body.theme-sepia {
      --bg-color: #f4f0e8;
      --text-color: #5b4636;
      --textarea-bg-color: #fdfaf3;
      --textarea-border-color: #dcd3c3;
      --article-bg-color: #fdfaf3;
      --article-border-color: #dcd3c3;
      --status-color: #5b4636;
      --modal-content-bg: #fdfaf3;
      --input-border-color: #c9bca8;
      --settings-icon-color: #5b4636;
      --log-color: #4CAF50; /* Green for sepia theme */
    }

    body {
      font-family: var(--primary-font);
      background: var(--bg-color);
      color: var(--text-color);
      max-width: 600px;
      margin: auto;
      padding: 20px;
      overflow-x: hidden;
      padding-bottom: 90px;
      transition: background-color 0.3s, color 0.3s;
    }

    input[type="file"], textarea { /* Apply styles to specific input type and textarea */
      width: 100%;
      margin: 10px 0;
      padding: 10px;
      font-size: var(--font-size); /* Apply font size from settings */
      box-sizing: border-box;
      border-radius: 8px; /* Added border-radius */
      background-color: var(--textarea-bg-color); /* Apply bg color */
      border: 1px solid var(--textarea-border-color); /* Apply border color */
      color: var(--text-color); /* Apply text color */
      transition: background-color 0.3s, color 0.3s, border-color 0.3s;
    }
    textarea {
      height: 150px;
      resize: vertical;
    }
    button {
      cursor: pointer;
      padding: 10px;
      font-size: 16px;
      margin: 6px 6px 6px 0; /* Adjusted margin */
      border-radius: 6px; /* Added border-radius */
      border: none; /* Removed default border */
      color: white;
      background-color: var(--button-primary-bg); /* Default button color */
    }
    button.copy { background-color: var(--button-secondary-bg); }
    button.delete { background-color: var(--button-danger-bg); }
    button.save { background-color: var(--button-primary-bg); } /* Specific save button style */

    #log {
      white-space: pre-wrap;
      color: var(--log-color); /* Apply log color */
      margin-top: 10px;
      font-size: 14px; /* Consistent with status */
    }
    #shareLink {
      width: 100%;
      word-break: break-word;
      overflow-wrap: break-word;
      padding: 0;
      margin: 10px 0;
      border: none;
      background: none;
      box-sizing: border-box;
      padding-bottom: 20px;
      font-size: var(--font-size); /* Apply font size */
      line-height: var(--line-height); /* Apply line height */
    }
    #shareLink a {
      color: var(--button-secondary-bg); /* Link color from button blue */
    }
    #savingStatus {
      float: right;
      font-size: 14px; /* Consistent with status */
      color: var(--status-color);
      margin-top: 10px; /* Aligned with log */
    }

    #fixedBar {
      position: fixed;
      bottom: 10px;
      left: 0;
      right: 0;
      width: 100%;
      max-width: 600px;
      margin: auto;
      display: flex;
      gap: 10px;
      padding: 10px;
      background: var(--modal-content-bg); /* Use modal bg for fixed bar */
      backdrop-filter: blur(4px);
      border-top: 1px solid var(--article-border-color); /* Use border color */
      box-shadow: 0 -1px 6px rgba(0,0,0,0.1);
      z-index: 1000;
      flex-wrap: nowrap;
      box-sizing: border-box;
      overflow: hidden;
      border-radius: 8px 8px 0 0; /* Slightly rounded top corners */
    }
    @media (max-width: 600px) {
        #fixedBar {
            padding-left: 20px;
            padding-right: 20px;
        }
    }
    #fixedBar button {
      flex: 1 1 0%;
      min-width: unset;
      margin: 0; /* Remove individual button margins here */
    }
    @media (max-width: 480px) {
      h2 { font-size: 20px; }
      input[type="file"], button, textarea { /* Apply to relevant inputs */
        font-size: 16px;
        padding: 8px;
      }
      #fixedBar button {
        padding: 8px;
        font-size: 14px;
      }
    }
    #lastUploadedFileInfo {
      margin-top: 20px;
      padding: 10px;
      border: 1px solid var(--article-border-color); /* Use border color */
      background: var(--article-bg-color); /* Use article bg */
      border-radius: 8px; /* Consistent radius */
      display: none; /* Hidden by default, shown when content is available */
    }
    #lastUploadedFileInfo p {
      margin: 5px 0;
    }
    #lastUploadedFileInfo a {
      color: var(--button-secondary-bg); /* Consistent link color */
      word-break: break-all;
    }

    /* --- Settings Icon --- */
    #settings-icon {
      position: absolute;
      top: 20px; /* Adjust top to be within padding */
      right: 20px; /* Adjust right to be within padding */
      font-size: 24px;
      cursor: pointer;
      color: var(--settings-icon-color);
      z-index: 1001; /* Ensure it's above other content but below modal */
    }

    /* --- Modal Styles --- */
    .modal {
      position: fixed;
      top: 0; left: 0;
      width: 100%; height: 100%;
      background: var(--modal-bg);
      display: none; /* Initially hidden */
      justify-content: center;
      align-items: center;
      z-index: 9999; /* Higher z-index for modal */
    }
    .modal-content {
      background: var(--modal-content-bg);
      color: var(--text-color);
      padding: 20px;
      border-radius: 8px;
      width: 90%;
      max-width: 400px;
    }
    .modal-content h3 {
      margin-top: 0;
      color: var(--text-color);
    }
    .modal-content input[type="password"], .modal-content select { /* Target only password input for token */
      width: 100%;
      padding: 10px;
      margin-top: 10px;
      font-size: 16px;
      border-radius: 5px;
      border: 1px solid var(--input-border-color);
      background-color: var(--textarea-bg-color);
      color: var(--text-color);
      box-sizing: border-box;
    }
    .modal-content label {
      display: block;
      margin-top: 15px;
      font-size: 14px;
      color: var(--status-color);
    }
    .modal-content hr {
      border: 0;
      border-top: 1px solid var(--textarea-border-color);
      margin: 20px 0;
    }
    .modal-content button {
        width: auto; /* Allow buttons to size naturally */
        margin-top: 10px;
    }
    .modal-content button.right-align {
        float: right;
    }

  </style>
</head>
<body>
  <div id="settings-icon" title="设置" onclick="openSettingsModal()">⚙️</div>
  <h2>📦 GitHub 文件同步助手</h2>

  <h3>📁 文件同步</h3>
  <input id="fileInput" type="file" />

  <div id="savingStatus"></div>
  <div id="shareLink"></div>
  <div id="log"></div>

  <div id="lastUploadedFileInfo">
    <h3>最近上传的文件：</h3>
    <p id="lastFileName"></p>
    <p id="lastFileLinks"></p>
    <button class="delete" onclick="deleteUploadedFile()">🗑️ 删除此文件</button>
  </div>

  <h3>📄 文本同步</h3>
  <textarea id="transferContent"></textarea>

  <div id="fixedBar">
    <button onclick="processUploadOrSubmit()">⬆️ 上传</button>
    <button class="copy" onclick="copyTransfer()">📋 复制</button>
    <button class="delete" onclick="clearTransferContent()">🗑️ 清除文本</button>
  </div>

  <div id="settingsModal" class="modal">
    <div class="modal-content">
      <h3>⚙️ 个性化设置</h3>

      <label for="tokenInput">GitHub Token：</label>
      <input type="password" id="tokenInput" placeholder="ghp_xxx 或 github_pat_xxx" />
      <button class="save" style="margin-top:10px;" onclick="saveTokenFromSettings()">保存 Token</button>

      <hr>

      <label for="theme-select">界面主题</label>
      <select id="theme-select">
        <option value="">默认 (亮色)</option>
        <option value="theme-dark">护眼 (暗色)</option>
        <option value="theme-sepia">纸张 (米色)</option>
      </select>

      <label for="font-family-select">阅读字体</label>
      <select id="font-family-select">
        <option value="'Helvetica Neue', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', sans-serif">无衬线体 (默认)</option>
        <option value="'Georgia', 'Noto Serif SC', 'Songti SC', serif">衬线体</option>
        <option value="'Courier New', 'SFMono-Regular', 'Consolas', monospace">等宽字体</option>
      </select>

      <label for="font-size-select">内容字号</label>
      <select id="font-size-select">
          <option value="15px">小</option>
          <option value="17px">中 (默认)</option>
          <option value="19px">大</option>
          <option value="21px">特大</option>
      </select>

      <label for="line-height-select">段落行高</label>
      <select id="line-height-select">
          <option value="1.4">紧凑</option>
          <option value="1.6">适中 (默认)</option>
          <option value="1.8">宽松</option>
      </select>

      <hr>

      <button class="delete" onclick="resetToken()">重设 GitHub Token</button>
      <button class="save right-align" onclick="saveAndApplySettings()">保存并关闭</button>
    </div>
  </div>


  <script>
    const GITHUB_USERNAME = "moodHappy";
    const GITHUB_REPO = "HelloWorld";
    const BRANCH_NAME = "master";
    const UPLOAD_PREFIX = "push_";
    const DEFAULT_UPLOAD_FOLDER = "Notes/";
    const PREVIEW_FILE_PATH = "Notes/Preview_and_Delete.json";
    const TRANSFER_FILE_PATH = "Notes/transfer.txt";
    const PENDING_DELETION_FILE_NAME = "pending_deletion.json";
    const PENDING_DELETION_PATH = `Notes/${PENDING_DELETION_FILE_NAME}`;
    const SETTINGS_KEY = "github_sync_assistant_settings_v2";

    let transferTxtSHA = null;
    let previewFileSHA = null; // SHA for Preview_and_Delete.json
    let pendingDeletionSHA = null; // SHA for pending_deletion.json

    let currentLastUploadedFilePath = null;
    let currentLastUploadedFileSHA = null;

    const rootElement = document.documentElement;

    // --- Settings Management ---
    const defaultSettings = {
        theme: '',
        fontFamily: "'Helvetica Neue', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', sans-serif",
        fontSize: '17px',
        lineHeight: '1.6'
    };

    function applySettings(settings) {
        document.body.className = settings.theme || '';
        rootElement.style.setProperty('--primary-font', settings.fontFamily);
        rootElement.style.setProperty('--font-size', settings.fontSize);
        rootElement.style.setProperty('--line-height', settings.lineHeight);
    }

    function loadSettings() {
        const savedSettings = JSON.parse(localStorage.getItem(SETTINGS_KEY));
        const currentSettings = { ...defaultSettings, ...savedSettings };
        applySettings(currentSettings);
    }

    function openSettingsModal() {
        const savedSettings = JSON.parse(localStorage.getItem(SETTINGS_KEY)) || defaultSettings;
        document.getElementById('theme-select').value = savedSettings.theme;
        document.getElementById('font-family-select').value = savedSettings.fontFamily;
        document.getElementById('font-size-select').value = savedSettings.fontSize;
        document.getElementById('line-height-select').value = savedSettings.lineHeight;

        // Load token into settings modal input
        const savedToken = localStorage.getItem("github_token");
        if (savedToken) {
            document.getElementById("tokenInput").value = savedToken;
        } else {
            document.getElementById("tokenInput").value = "";
        }
        document.getElementById('settingsModal').style.display = "flex";
    }

    function closeSettingsModal() {
        document.getElementById('settingsModal').style.display = "none";
    }

    function saveAndApplySettings() {
        const newSettings = {
            theme: document.getElementById('theme-select').value,
            fontFamily: document.getElementById('font-family-select').value,
            fontSize: document.getElementById('font-size-select').value,
            lineHeight: document.getElementById('line-height-select').value
        };
        localStorage.setItem(SETTINGS_KEY, JSON.stringify(newSettings));
        applySettings(newSettings);
        closeSettingsModal();
        document.getElementById("log").textContent = "⚙️ 设置已保存。";
    }

    // --- GitHub Token Management (now entirely within settings) ---
    function saveTokenFromSettings() {
      const token = document.getElementById("tokenInput").value.trim();
      if (token) {
        if (!token.startsWith("ghp_") && !token.startsWith("github_pat_")) {
          alert("请输入有效的 GitHub Token！(ghp_xxx 或 github_pat_xxx)");
          return;
        }
        localStorage.setItem("github_token", token);
        document.getElementById("log").textContent = "✅ GitHub Token 已保存！";
        // Reload information after saving token from settings
        loadTransfer();
        loadLastUploadedFileInfoFromGitHub();
        loadPendingDeletionSHA(); // Load SHA for pending_deletion.json
      } else {
        alert("⚠️ Token 不能为空，无法保存。");
      }
    }

    function getToken() {
      const token = localStorage.getItem("github_token");
      if (!token) throw new Error("请先在设置中输入 GitHub Token");
      return token;
    }

    function resetToken() {
      if (confirm("确定要清除已保存的 GitHub Token 并重新输入吗？")) {
        localStorage.removeItem("github_token");
        document.getElementById("tokenInput").value = ""; // Clear input in settings modal
        document.getElementById("log").textContent = "✅ GitHub Token 已清除。请在设置中输入新 Token。";
        // Clear content if token is removed
        document.getElementById("transferContent").value = "";
        document.getElementById("lastUploadedFileInfo").style.display = 'none';
        document.getElementById("lastFileName").textContent = "";
        document.getElementById("lastFileLinks").innerHTML = "";
        transferTxtSHA = null;
        previewFileSHA = null;
        pendingDeletionSHA = null; // Clear SHA for pending_deletion.json
        currentLastUploadedFilePath = null;
        currentLastUploadedFileSHA = null;
      }
    }

    // --- Core GitHub API Functions ---
    function encodePath(path) {
      return path.split('/').map(encodeURIComponent).join('/');
    }

    window.onload = async () => {
      loadSettings();
      // Removed the welcome message

      try {
        getToken();
        await loadTransfer();
        await loadLastUploadedFileInfoFromGitHub();
        await loadPendingDeletionSHA(); // Load SHA for pending_deletion.json on page load
      } catch (e) {
        console.warn(e.message);
      }
    };

    async function processUploadOrSubmit() {
      let token;
      try {
        token = getToken();
      } catch (e) {
        alert(e.message);
        return;
      }

      const file = document.getElementById("fileInput").files[0];
      const log = document.getElementById("log");
      const shareDiv = document.getElementById("shareLink");
      const transferContentArea = document.getElementById("transferContent");

      log.textContent = "";
      shareDiv.innerHTML = "";
      // Don't clear file info display unless a new file is actively being uploaded in this call.

      if (file) {
        // --- Handle File Upload ---
        // Clear file sync related info display when a new file upload is initiated
        document.getElementById("lastUploadedFileInfo").style.display = 'none';
        document.getElementById("lastFileName").textContent = "";
        document.getElementById("lastFileLinks").innerHTML = "";

        const finalPath = DEFAULT_UPLOAD_FOLDER + UPLOAD_PREFIX + file.name;

        if (file.size > 100 * 1024 * 1024) {
          log.textContent = "❌ GitHub 不支持上传超过 100MB 的文件";
          return;
        }

        log.textContent = `📤 正在上传 ${file.name} 到 ${finalPath}...`;
        const reader = new FileReader();
        reader.onload = async () => {
          const base64Data = reader.result.split(',')[1];
          const url = `https://api.github.com/repos/${GITHUB_USERNAME}/${GITHUB_REPO}/contents/${finalPath}`;

          let fileSHA = null;
          try {
            const checkRes = await fetch(url, {
              headers: { Authorization: `token ${token}` }
            });
            if (checkRes.ok) fileSHA = (await checkRes.json()).sha;
          } catch (e) { /* ignore if file not found */ }

          const res = await fetch(url, {
            method: "PUT",
            headers: {
              Authorization: `token ${token}`,
              "Content-Type": "application/json"
            },
            body: JSON.stringify({ message: `Upload ${file.name}`, content: base64Data, sha: fileSHA })
          });

          if (!res.ok) {
            const err = await res.json();
            log.textContent += `\n❌ 上传失败：${res.status} - ${err.message || res.statusText}`;
            return;
          }

          const confirmRes = await fetch(url, {
            headers: { Authorization: `token ${token}` }
          });
          const data = await confirmRes.json();
          const uploadedFileSHA = data.sha;

          // Update Preview_and_Delete.json for file uploads
          await updatePreviewFileOnGitHub(finalPath, uploadedFileSHA, token);
          currentLastUploadedFilePath = finalPath;
          currentLastUploadedFileSHA = uploadedFileSHA;

          const encodedPath = encodePath(finalPath);
          const githubPageLink = `https://github.com/${GITHUB_USERNAME}/${GITHUB_REPO}/blob/${BRANCH_NAME}/${encodedPath}`;
          const rawLink = `https://raw.githubusercontent.com/${GITHUB_USERNAME}/${GITHUB_REPO}/${BRANCH_NAME}/${encodedPath}`;
          shareDiv.innerHTML = `📎 <b>GitHub 查看链接：</b><br><a href="${githubPageLink}" target="_blank">${githubPageLink}</a><br><br>📥 <b>直链下载:</b><br><a href="${rawLink}" target="_blank">${rawLink}</a>`;

          const deleteTimeHours = 12; // This is a fixed value, no need for dynamic message
          const deleteAt = Date.now() + deleteTimeHours * 60 * 60 * 1000;

          try {
            // Update pending_deletion.json for file uploads
            await addEntryToPendingDeletion(finalPath, deleteAt, token);
            log.textContent += `\n✅ 文件上传成功！`;
          } catch (err) {
            log.textContent += `\n❌ 文件上传成功，但无法更新删除计划：${err.message}`;
          }
        };
        reader.readAsDataURL(file);

      } else if (transferContentArea.value.trim() !== "") {
        // --- Handle Text Synchronization ---
        log.textContent = "📝 正在提交 Notes/transfer.txt 文本...";
        // Ensure file upload section is not affected by text sync
        // currentLastUploadedFilePath and currentLastUploadedFileSHA should retain their values
        // or be null if no file was previously uploaded.

        try {
            await updateTransferFile(transferContentArea.value, token);
            log.textContent = "✅ 文本已成功提交到 Notes/transfer.txt";
            const trans