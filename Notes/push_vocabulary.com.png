<!DOCTYPE html>
<html lang="zh">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>GitHub Êñá‰ª∂ÂêåÊ≠•Âä©Êâã</title>
  <style>
    /* CSS Variables for theming and typography */
    :root {
      --bg-color: #f9f9f9;
      --text-color: #222;
      --textarea-bg-color: #fff;
      --textarea-border-color: #ccc;
      --article-bg-color: #fff;
      --article-border-color: #ccc;
      --status-color: #444;
      --button-primary-bg: #4CAF50;
      --button-secondary-bg: #2196F3;
      --button-danger-bg: #f44336;
      --modal-bg: rgba(0,0,0,0.5);
      --modal-content-bg: #fff;
      --input-border-color: #aaa;
      --settings-icon-color: #333;
      --log-color: green; /* New: for log messages */

      --primary-font: 'Helvetica Neue', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', sans-serif;
      --font-size: 17px;
      --line-height: 1.6;
    }

    /* Dark Theme */
    body.theme-dark {
      --bg-color: #121212;
      --text-color: #e0e0e0;
      --textarea-bg-color: #1e1e1e;
      --textarea-border-color: #444;
      --article-bg-color: #1e1e1e;
      --article-border-color: #444;
      --status-color: #aaa;
      --modal-content-bg: #2d2d2d;
      --input-border-color: #555;
      --settings-icon-color: #ccc;
      --log-color: #90EE90; /* Light green for dark theme */
    }

    /* Sepia Theme */
    body.theme-sepia {
      --bg-color: #f4f0e8;
      --text-color: #5b4636;
      --textarea-bg-color: #fdfaf3;
      --textarea-border-color: #dcd3c3;
      --article-bg-color: #fdfaf3;
      --article-border-color: #dcd3c3;
      --status-color: #5b4636;
      --modal-content-bg: #fdfaf3;
      --input-border-color: #c9bca8;
      --settings-icon-color: #5b4636;
      --log-color: #4CAF50; /* Green for sepia theme */
    }

    body {
      font-family: var(--primary-font);
      background: var(--bg-color);
      color: var(--text-color);
      max-width: 600px;
      margin: auto;
      padding: 20px;
      overflow-x: hidden;
      padding-bottom: 90px;
      transition: background-color 0.3s, color 0.3s;
    }

    input[type="file"], textarea { /* Apply styles to specific input type and textarea */
      width: 100%;
      margin: 10px 0;
      padding: 10px;
      font-size: var(--font-size); /* Apply font size from settings */
      box-sizing: border-box;
      border-radius: 8px; /* Added border-radius */
      background-color: var(--textarea-bg-color); /* Apply bg color */
      border: 1px solid var(--textarea-border-color); /* Apply border color */
      color: var(--text-color); /* Apply text color */
      transition: background-color 0.3s, color 0.3s, border-color 0.3s;
    }
    textarea {
      height: 150px;
      resize: vertical;
    }
    button {
      cursor: pointer;
      padding: 10px;
      font-size: 16px;
      margin: 6px 6px 6px 0; /* Adjusted margin */
      border-radius: 6px; /* Added border-radius */
      border: none; /* Removed default border */
      color: white;
      background-color: var(--button-primary-bg); /* Default button color */
    }
    button.copy { background-color: var(--button-secondary-bg); }
    button.delete { background-color: var(--button-danger-bg); }
    button.save { background-color: var(--button-primary-bg); } /* Specific save button style */

    #log {
      white-space: pre-wrap;
      color: var(--log-color); /* Apply log color */
      margin-top: 10px;
      font-size: 14px; /* Consistent with status */
    }
    #shareLink {
      width: 100%;
      word-break: break-word;
      overflow-wrap: break-word;
      padding: 0;
      margin: 10px 0;
      border: none;
      background: none;
      box-sizing: border-box;
      padding-bottom: 20px;
      font-size: var(--font-size); /* Apply font size */
      line-height: var(--line-height); /* Apply line height */
    }
    #shareLink a {
      color: var(--button-secondary-bg); /* Link color from button blue */
    }
    #savingStatus {
      float: right;
      font-size: 14px; /* Consistent with status */
      color: var(--status-color);
      margin-top: 10px; /* Aligned with log */
    }
    /* Removed #tokenInputContainer styles as it's no longer on main page */

    #fixedBar {
      position: fixed;
      bottom: 10px;
      left: 0;
      right: 0;
      width: 100%;
      max-width: 600px;
      margin: auto;
      display: flex;
      gap: 10px;
      padding: 10px;
      background: var(--modal-content-bg); /* Use modal bg for fixed bar */
      backdrop-filter: blur(4px);
      border-top: 1px solid var(--article-border-color); /* Use border color */
      box-shadow: 0 -1px 6px rgba(0,0,0,0.1);
      z-index: 1000;
      flex-wrap: nowrap;
      box-sizing: border-box;
      overflow: hidden;
      border-radius: 8px 8px 0 0; /* Slightly rounded top corners */
    }
    @media (max-width: 600px) {
        #fixedBar {
            padding-left: 20px;
            padding-right: 20px;
        }
    }
    #fixedBar button {
      flex: 1 1 0%;
      min-width: unset;
      margin: 0; /* Remove individual button margins here */
    }
    @media (max-width: 480px) {
      h2 { font-size: 20px; }
      input[type="file"], button, textarea { /* Apply to relevant inputs */
        font-size: 16px;
        padding: 8px;
      }
      #fixedBar button {
        padding: 8px;
        font-size: 14px;
      }
    }
    #lastUploadedFileInfo {
      margin-top: 20px;
      padding: 10px;
      border: 1px solid var(--article-border-color); /* Use border color */
      background: var(--article-bg-color); /* Use article bg */
      border-radius: 8px; /* Consistent radius */
      display: none; /* Hidden by default, shown when content is available */
    }
    #lastUploadedFileInfo p {
      margin: 5px 0;
    }
    #lastUploadedFileInfo a {
      color: var(--button-secondary-bg); /* Consistent link color */
      word-break: break-all;
    }

    /* --- Settings Icon --- */
    #settings-icon {
      position: absolute;
      top: 20px; /* Adjust top to be within padding */
      right: 20px; /* Adjust right to be within padding */
      font-size: 24px;
      cursor: pointer;
      color: var(--settings-icon-color);
      z-index: 1001; /* Ensure it's above other content but below modal */
    }

    /* --- Modal Styles --- */
    .modal {
      position: fixed;
      top: 0; left: 0;
      width: 100%; height: 100%;
      background: var(--modal-bg);
      display: none; /* Initially hidden */
      justify-content: center;
      align-items: center;
      z-index: 9999; /* Higher z-index for modal */
    }
    .modal-content {
      background: var(--modal-content-bg);
      color: var(--text-color);
      padding: 20px;
      border-radius: 8px;
      width: 90%;
      max-width: 400px;
    }
    .modal-content h3 {
      margin-top: 0;
      color: var(--text-color);
    }
    .modal-content input[type="password"], .modal-content select { /* Target only password input for token */
      width: 100%;
      padding: 10px;
      margin-top: 10px;
      font-size: 16px;
      border-radius: 5px;
      border: 1px solid var(--input-border-color);
      background-color: var(--textarea-bg-color);
      color: var(--text-color);
      box-sizing: border-box;
    }
    .modal-content label {
      display: block;
      margin-top: 15px;
      font-size: 14px;
      color: var(--status-color);
    }
    .modal-content hr {
      border: 0;
      border-top: 1px solid var(--textarea-border-color);
      margin: 20px 0;
    }
    .modal-content button {
        width: auto; /* Allow buttons to size naturally */
        margin-top: 10px;
    }
    .modal-content button.right-align {
        float: right;
    }

  </style>
</head>
<body>
  <div id="settings-icon" title="ËÆæÁΩÆ" onclick="openSettingsModal()">‚öôÔ∏è</div>
  <h2>üì¶ GitHub Êñá‰ª∂ÂêåÊ≠•Âä©Êâã</h2>

  <label>ÈÄâÊã©Êñá‰ª∂:</label>
  <input id="fileInput" type="file" />

  <p style="color: var(--status-color); font-size: 0.9em;">
  </p>

  <div id="savingStatus"></div>
  <div id="shareLink"></div>
  <div id="log"></div>

  <div id="lastUploadedFileInfo">
    <h3>ÊúÄËøë‰∏ä‰º†ÁöÑÊñá‰ª∂Ôºö</h3>
    <p id="lastFileName"></p>
    <p id="lastFileLinks"></p>
    <button class="delete" onclick="deleteLastUploadedFile(true)">üóëÔ∏è Âà†Èô§Ê≠§Êñá‰ª∂</button>
  </div>

  <h3>üìÑ ÊñáÊú¨ÂêåÊ≠•</h3>
  <textarea id="transferContent"></textarea>

  <div id="fixedBar">
    <button onclick="processUploadOrSubmit()">‚¨ÜÔ∏è ‰∏ä‰º†</button>
    <button class="copy" onclick="copyTransfer()">üìã Â§çÂà∂</button>
    <button class="delete" onclick="deleteLastUploadedFile()">üóëÔ∏è Âà†Èô§</button>
  </div>

  <div id="settingsModal" class="modal">
    <div class="modal-content">
      <h3>‚öôÔ∏è ‰∏™ÊÄßÂåñËÆæÁΩÆ</h3>

      <label for="tokenInput">GitHub TokenÔºö</label>
      <input type="password" id="tokenInput" placeholder="ghp_xxx Êàñ github_pat_xxx" />
      <button class="save" style="margin-top:10px;" onclick="saveTokenFromSettings()">‰øùÂ≠ò Token</button>

      <hr>

      <label for="theme-select">ÁïåÈù¢‰∏ªÈ¢ò</label>
      <select id="theme-select">
        <option value="">ÈªòËÆ§ (‰∫ÆËâ≤)</option>
        <option value="theme-dark">Êä§Áúº (ÊöóËâ≤)</option>
        <option value="theme-sepia">Á∫∏Âº† (Á±≥Ëâ≤)</option>
      </select>

      <label for="font-family-select">ÈòÖËØªÂ≠ó‰Ωì</label>
      <select id="font-family-select">
        <option value="'Helvetica Neue', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', sans-serif">Êó†Ë°¨Á∫ø‰Ωì (ÈªòËÆ§)</option>
        <option value="'Georgia', 'Noto Serif SC', 'Songti SC', serif">Ë°¨Á∫ø‰Ωì</option>
        <option value="'Courier New', 'SFMono-Regular', 'Consolas', monospace">Á≠âÂÆΩÂ≠ó‰Ωì</option>
      </select>

      <label for="font-size-select">ÂÜÖÂÆπÂ≠óÂè∑</label>
      <select id="font-size-select">
          <option value="15px">Â∞è</option>
          <option value="17px">‰∏≠ (ÈªòËÆ§)</option>
          <option value="19px">Â§ß</option>
          <option value="21px">ÁâπÂ§ß</option>
      </select>

      <label for="line-height-select">ÊÆµËêΩË°åÈ´ò</label>
      <select id="line-height-select">
          <option value="1.4">Á¥ßÂáë</option>
          <option value="1.6">ÈÄÇ‰∏≠ (ÈªòËÆ§)</option>
          <option value="1.8">ÂÆΩÊùæ</option>
      </select>

      <hr>

      <button class="delete" onclick="resetToken()">ÈáçËÆæ GitHub Token</button>
      <button class="save right-align" onclick="saveAndApplySettings()">‰øùÂ≠òÂπ∂ÂÖ≥Èó≠</button>
    </div>
  </div>


  <script>
    const GITHUB_USERNAME = "moodHappy";
    const GITHUB_REPO = "HelloWorld";
    const BRANCH_NAME = "master";
    const UPLOAD_PREFIX = "push_";
    const DEFAULT_UPLOAD_FOLDER = "Notes/";
    const PREVIEW_FILE_PATH = "Notes/Preview_and_Delete.json";
    const SETTINGS_KEY = "github_sync_assistant_settings_v2";

    let transferTxtSHA = null;
    let previewFileSHA = null;

    let currentLastUploadedFilePath = null;
    let currentLastUploadedFileSHA = null;

    const rootElement = document.documentElement;

    // --- Settings Management ---
    const defaultSettings = {
        theme: '',
        fontFamily: "'Helvetica Neue', 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', sans-serif",
        fontSize: '17px',
        lineHeight: '1.6'
    };

    function applySettings(settings) {
        document.body.className = settings.theme || '';
        rootElement.style.setProperty('--primary-font', settings.fontFamily);
        rootElement.style.setProperty('--font-size', settings.fontSize);
        rootElement.style.setProperty('--line-height', settings.lineHeight);
    }

    function loadSettings() {
        const savedSettings = JSON.parse(localStorage.getItem(SETTINGS_KEY));
        const currentSettings = { ...defaultSettings, ...savedSettings };
        applySettings(currentSettings);
    }

    function openSettingsModal() {
        const savedSettings = JSON.parse(localStorage.getItem(SETTINGS_KEY)) || defaultSettings;
        document.getElementById('theme-select').value = savedSettings.theme;
        document.getElementById('font-family-select').value = savedSettings.fontFamily;
        document.getElementById('font-size-select').value = savedSettings.fontSize;
        document.getElementById('line-height-select').value = savedSettings.lineHeight;

        // Load token into settings modal input
        const savedToken = localStorage.getItem("github_token");
        if (savedToken) {
            document.getElementById("tokenInput").value = savedToken;
        } else {
            document.getElementById("tokenInput").value = "";
        }
        document.getElementById('settingsModal').style.display = "flex";
    }

    function closeSettingsModal() {
        document.getElementById('settingsModal').style.display = "none";
    }

    function saveAndApplySettings() {
        const newSettings = {
            theme: document.getElementById('theme-select').value,
            fontFamily: document.getElementById('font-family-select').value,
            fontSize: document.getElementById('font-size-select').value,
            lineHeight: document.getElementById('line-height-select').value
        };
        localStorage.setItem(SETTINGS_KEY, JSON.stringify(newSettings));
        applySettings(newSettings);
        closeSettingsModal();
        document.getElementById("log").textContent = "‚öôÔ∏è ËÆæÁΩÆÂ∑≤‰øùÂ≠ò„ÄÇ";
    }

    // --- GitHub Token Management (now entirely within settings) ---
    function saveTokenFromSettings() { // Renamed to differentiate
      const token = document.getElementById("tokenInput").value.trim();
      if (token) {
        if (!token.startsWith("ghp_") && !token.startsWith("github_pat_")) {
          alert("ËØ∑ËæìÂÖ•ÊúâÊïàÁöÑ GitHub TokenÔºÅ(ghp_xxx Êàñ github_pat_xxx)");
          return;
        }
        localStorage.setItem("github_token", token);
        document.getElementById("log").textContent = "‚úÖ GitHub Token Â∑≤‰øùÂ≠òÔºÅ";
        // Optionally, reload information after saving token from settings
        loadTransfer();
        loadLastUploadedFileInfoFromGitHub();
      } else {
        alert("‚ö†Ô∏è Token ‰∏çËÉΩ‰∏∫Á©∫ÔºåÊó†Ê≥ï‰øùÂ≠ò„ÄÇ");
      }
    }

    function getToken() {
      const token = localStorage.getItem("github_token");
      if (!token) throw new Error("ËØ∑ÂÖàÂú®ËÆæÁΩÆ‰∏≠ËæìÂÖ• GitHub Token");
      return token;
    }

    function resetToken() {
      if (confirm("Á°ÆÂÆöË¶ÅÊ∏ÖÈô§Â∑≤‰øùÂ≠òÁöÑ GitHub Token Âπ∂ÈáçÊñ∞ËæìÂÖ•ÂêóÔºü")) {
        localStorage.removeItem("github_token");
        document.getElementById("tokenInput").value = ""; // Clear input in settings modal
        // No longer closing settings modal here, user can input new token immediately
        document.getElementById("log").textContent = "‚úÖ GitHub Token Â∑≤Ê∏ÖÈô§„ÄÇËØ∑Âú®ËÆæÁΩÆ‰∏≠ËæìÂÖ•Êñ∞ Token„ÄÇ";
      }
    }

    // --- Core GitHub API Functions ---
    function encodePath(path) {
      return path.split('/').map(encodeURIComponent).join('/');
    }

    window.onload = async () => {
      loadSettings(); // Load settings first
      // No need to check token in main onload for input field anymore
      // Token check will happen when API calls are made, and prompt user via alert if missing.
      document.getElementById("log").textContent = "";

      // Load initial content if token is already present
      try {
        getToken(); // This will throw if no token exists, preventing API calls
        await loadTransfer();
        await loadLastUploadedFileInfoFromGitHub();
      } catch (e) {
        console.warn(e.message); // Log the token missing message, but don't block
      }
    };

    async function processUploadOrSubmit() {
      let token;
      try {
        token = getToken();
      } catch (e) {
        alert(e.message);
        return;
      }

      const file = document.getElementById("fileInput").files[0];
      const log = document.getElementById("log");
      const shareDiv = document.getElementById("shareLink");
      const transferContentArea = document.getElementById("transferContent");

      log.textContent = "";
      shareDiv.innerHTML = "";
      document.getElementById("lastUploadedFileInfo").style.display = 'none';
      document.getElementById("lastFileName").textContent = "";
      document.getElementById("lastFileLinks").innerHTML = "";

      if (file) {
        const finalPath = DEFAULT_UPLOAD_FOLDER + UPLOAD_PREFIX + file.name;

        if (file.size > 100 * 1024 * 1024) {
          log.textContent = "‚ùå GitHub ‰∏çÊîØÊåÅ‰∏ä‰º†Ë∂ÖËøá 100MB ÁöÑÊñá‰ª∂";
          return;
        }

        log.textContent = `üì§ Ê≠£Âú®‰∏ä‰º† ${file.name} Âà∞ ${finalPath}...`;
        const reader = new FileReader();
        reader.onload = async () => {
          const base64Data = reader.result.split(',')[1];
          const url = `https://api.github.com/repos/${GITHUB_USERNAME}/${GITHUB_REPO}/contents/${finalPath}`;

          let fileSHA = null;
          try {
            const checkRes = await fetch(url, {
              headers: { Authorization: `token ${token}` }
            });
            if (checkRes.ok) fileSHA = (await checkRes.json()).sha;
          } catch (e) { /* ignore if file not found */ }

          const res = await fetch(url, {
            method: "PUT",
            headers: {
              Authorization: `token ${token}`,
              "Content-Type": "application/json"
            },
            body: JSON.stringify({ message: `Upload ${file.name}`, content: base64Data, sha: fileSHA })
          });

          if (!res.ok) {
            const err = await res.json();
            log.textContent += `\n‚ùå ‰∏ä‰º†Â§±Ë¥•Ôºö${res.status} - ${err.message || res.statusText}`;
            return;
          }

          const confirmRes = await fetch(url, {
            headers: { Authorization: `token ${token}` }
          });
          const data = await confirmRes.json();
          const uploadedFileSHA = data.sha;

          await updatePreviewFileOnGitHub(finalPath, uploadedFileSHA, token);
          currentLastUploadedFilePath = finalPath;
          currentLastUploadedFileSHA = uploadedFileSHA;

          const encodedPath = encodePath(finalPath);
          const githubPageLink = `https://github.com/${GITHUB_USERNAME}/${GITHUB_REPO}/blob/${BRANCH_NAME}/${encodedPath}`;
          const rawLink = `https://raw.githubusercontent.com/${GITHUB_USERNAME}/${GITHUB_REPO}/${BRANCH_NAME}/${encodedPath}`;
          shareDiv.innerHTML = `üìé <b>GitHub Êü•ÁúãÈìæÊé•Ôºö</b><br><a href="${githubPageLink}" target="_blank">${githubPageLink}</a><br><br>üì• <b>Áõ¥Èìæ‰∏ãËΩΩ:</b><br><a href="${rawLink}" target="_blank">${rawLink}</a>`;

          const deleteTimeHours = 12;
          const deleteAt = Date.now() + deleteTimeHours * 60 * 60 * 1000;

          try {
            await updatePendingDeletion(finalPath, deleteAt, token);
            log.textContent += `\n‚úÖ Êñá‰ª∂‰∏ä‰º†ÊàêÂäüÔºÅ`;
            log.textContent += `\n‚è≥ Êñá‰ª∂Â∞ÜÂú®Â§ßÁ∫¶ ${deleteTimeHours} Â∞èÊó∂ÂêéË¢´ GitHub Actions Ëá™Âä®Âà†Èô§„ÄÇ`;
            await displayLastUploadedFile();
          } catch (err) {
            log.textContent += `\n‚ùå Êñá‰ª∂‰∏ä‰º†ÊàêÂäüÔºå‰ΩÜÊó†Ê≥ïÊõ¥Êñ∞Âà†Èô§ËÆ°ÂàíÔºö${err.message}`;
          }
        };
        reader.readAsDataURL(file);

      } else if (transferContentArea.value.trim() !== "") {
        log.textContent = "üìù Ê≠£Âú®Êèê‰∫§ Notes/transfer.txt ÊñáÊú¨...";
        const transferFilePath = "Notes/transfer.txt";
        try {
            await updateTransferFile(transferContentArea.value, token);
            log.textContent = "‚úÖ ÊñáÊú¨Â∑≤ÊàêÂäüÊèê‰∫§Âà∞ Notes/transfer.txt";
            const transferTxtLink = `https://raw.githubusercontent.com/${GITHUB_USERNAME}/${GITHUB_REPO}/${BRANCH_NAME}/${encodePath(transferFilePath)}`;
            shareDiv.innerHTML = `üìù <b>transfer.txt Áõ¥Èìæ:</b><br><a href="${transferTxtLink}" target="_blank">${transferTxtLink}</a>`;
        } catch (err) {
            log.textContent = `‚ùå ÊñáÊú¨Êèê‰∫§Â§±Ë¥•: ${err.message}`;
        }
      } else {
        log.textContent = "‚ö†Ô∏è ËØ∑ÈÄâÊã©‰∏Ä‰∏™Êñá‰ª∂ÊàñÂú®‰∏ãÊñπÊñáÊú¨Âå∫ËæìÂÖ•Ë¶ÅÊèê‰∫§ÁöÑÊñáÊú¨";
      }
    }

    async function deleteLastUploadedFile() {
      if (!currentLastUploadedFilePath || !currentLastUploadedFileSHA) {
        alert("Ê≤°ÊúâÊúÄËøë‰∏ä‰º†ÁöÑÊñá‰ª∂ÂèØ‰ª•Âà†Èô§„ÄÇ");
        return;
      }

      const confirmDelete = confirm(`Á°ÆÂÆöË¶ÅÂà†Èô§Êñá‰ª∂ "${currentLastUploadedFilePath}" ÂêóÔºü`);
      if (!confirmDelete) return;

      let token;
      try {
        token = getToken();
      } catch (e) {
        alert(e.message);
        return;
      }

      const log = document.getElementById("log");
      const shareDiv = document.getElementById("shareLink");
      log.textContent = `üóëÔ∏è Ê≠£Âú®Âà†Èô§ ${currentLastUploadedFilePath}...`;
      shareDiv.innerHTML = "";

      const url = `https://api.github.com/repos/${GITHUB_USERNAME}/${GITHUB_REPO}/contents/${currentLastUploadedFilePath}`;

      try {
        const res = await fetch(url, {
          method: "DELETE",
          headers: {
            Authorization: `token ${token}`,
            "Content-Type": "application/json"
          },
          body: JSON.stringify({ message: `Delete ${currentLastUploadedFilePath}`, sha: currentLastUploadedFileSHA })
        });

        if (!res.ok) {
          const err = await res.json();
          throw new Error(`Âà†Èô§Â§±Ë¥•Ôºö${res.status} - ${err.message || res.statusText}`);
        }

        log.textContent = `‚úÖ Êñá‰ª∂ ${currentLastUploadedFilePath} Â∑≤ÊàêÂäüÂà†Èô§„ÄÇ`;
        await updatePreviewFileOnGitHub(null, null, token);
        currentLastUploadedFilePath = null;
        currentLastUploadedFileSHA = null;
        document.getElementById("lastUploadedFileInfo").style.display = 'none';
        document.getElementById("lastFileName").textContent = "";
        document.getElementById("lastFileLinks").innerHTML = "";

      } catch (err) {
        log.textContent = `‚ùå Âà†Èô§Â§±Ë¥•Ôºö${err.message}`;
      }
    }

    async function displayLastUploadedFile() {
      const fileInfoDiv = document.getElementById("lastUploadedFileInfo");
      const fileNameP = document.getElementById("lastFileName");
      const fileLinksP = document.getElementById("lastFileLinks");

      if (currentLastUploadedFilePath && currentLastUploadedFileSHA) {
        const encodedPath = encodePath(currentLastUploadedFilePath);
        const githubPageLink = `https://github.com/${GITHUB_USERNAME}/${GITHUB_REPO}/blob/${BRANCH_NAME}/${encodedPath}`;
        const rawLink = `https://raw.githubusercontent.com/${GITHUB_USERNAME}/${GITHUB_REPO}/${BRANCH_NAME}/${encodedPath}`;

        fileNameP.textContent = `Êñá‰ª∂Âêç: ${currentLastUploadedFilePath.split('/').pop()}`;
        fileLinksP.innerHTML = `
          <b>GitHub Êü•ÁúãÈìæÊé•Ôºö</b><br><a href="${githubPageLink}" target="_blank">${githubPageLink}</a><br>
          <b>Áõ¥Èìæ‰∏ãËΩΩ:</b><br><a href="${rawLink}" target="_blank">${rawLink}</a>
        `;
        fileInfoDiv.style.display = 'block';
      } else {
        fileInfoDiv.style.display = 'none';
      }
    }

    async function loadLastUploadedFileInfoFromGitHub() {
      let token;
      try {
        token = getToken();
      } catch (e) {
        console.warn("Token not available, skipping loading last uploaded file info from GitHub.");
        return;
      }

      const url = `https://api.github.com/repos/${GITHUB_USERNAME}/${GITHUB_REPO}/contents/${PREVIEW_FILE_PATH}`;
      try {
        const res = await fetch(url, { headers: { Authorization: `token ${token}` } });
        if (res.ok) {
          const data = await res.json();
          previewFileSHA = data.sha;
          const content = JSON.parse(decodeURIComponent(escape(atob(data.content.replace(/\n/g, "")))));
          if (content && content.path && content.sha) {
            currentLastUploadedFilePath = content.path;
            currentLastUploadedFileSHA = content.sha;
            await displayLastUploadedFile();
          } else {
            console.log("Preview_and_Delete.json is empty or malformed.");
            document.getElementById("lastUploadedFileInfo").style.display = 'none';
          }
        } else if (res.status === 404) {
          console.log(`${PREVIEW_FILE_PATH} not found, initializing.`);
          document.getElementById("lastUploadedFileInfo").style.display = 'none';
        } else {
          console.error(`Failed to load ${PREVIEW_FILE_PATH}: ${res.status} - ${res.statusText}`);
          document.getElementById("log").textContent = `‚ö†Ô∏è Ëé∑ÂèñÊúÄËøë‰∏ä‰º†Êñá‰ª∂‰ø°ÊÅØÂ§±Ë¥•: ${res.status}. ËØ∑Ê£ÄÊü•TokenÊàñÊñá‰ª∂ÊùÉÈôê.`;
          document.getElementById("lastUploadedFileInfo").style.display = 'none';
        }
      } catch (err) {
        console.error(`Error loading ${PREVIEW_FILE_PATH}:`, err);
        document.getElementById("log").textContent = `‚ö†Ô∏è Ëé∑ÂèñÊúÄËøë‰∏ä‰º†Êñá‰ª∂‰ø°ÊÅØÂ§±Ë¥•: ${err.message}.`;
        document.getElementById("lastUploadedFileInfo").style.display = 'none';
      }
    }

    async function updatePreviewFileOnGitHub(filePath, fileSHA, token) {
      const url = `https://api.github.com/repos/${GITHUB_USERNAME}/${GITHUB_REPO}/contents/${PREVIEW_FILE_PATH}`;
      let contentToSave = {};
      if (filePath && fileSHA) {
        contentToSave = { path: filePath, sha: fileSHA };
      }

      const base64Content = btoa(unescape(encodeURIComponent(JSON.stringify(contentToSave, null, 2))));
      const message = filePath ? `Update last uploaded file info for ${filePath}` : `Clear last uploaded file info`;

      try {
        const putRes = await fetch(url, {
          method: "PUT",
          headers: { Authorization: `token ${token}`, "Content-Type": "application/json" },
          body: JSON.stringify({ message: message, content: base64Content, sha: previewFileSHA })
        });

        if (!putRes.ok) {
          const err = await putRes.json();
          throw new Error(`Êó†Ê≥ïÊõ¥Êñ∞ ${PREVIEW_FILE_PATH}: ${putRes.status} - ${err.message || putRes.statusText}`);
        }
        const data = await putRes.json();
        previewFileSHA = data.content.sha;
      } catch (err) {
        console.error(`Error updating ${PREVIEW_FILE_PATH}:`, err);
        throw err;
      }
    }

    async function updatePendingDeletion(filePath, deleteAt, token) {
      const pendingDeletionFileName = "pending_deletion.json";
      const pendingDeletionPath = `Notes/${pendingDeletionFileName}`;
      const url = `https://api.github.com/repos/${GITHUB_USERNAME}/${GITHUB_REPO}/contents/${pendingDeletionPath}`;
      let sha = null;
      let data = [];

      try {
        const res = await fetch(url, { headers: { Authorization: `token ${token}` } });
        if (res.ok) {
          const json = await res.json();
          sha = json.sha;
          data = JSON.parse(decodeURIComponent(escape(atob(json.content.replace(/\n/g, "")))));
        } else if (res.status !== 404) {
          throw new Error(`Êó†Ê≥ïËé∑Âèñ ${pendingDeletionFileName}: ${res.status} - ${res.statusText}`);
        }
      } catch (err) {
        console.error(`Error getting ${pendingDeletionFileName}:`, err);
      }

      data.push({ path: filePath, deleteAt: deleteAt });

      const base64Content = btoa(unescape(encodeURIComponent(JSON.stringify(data, null, 2))));
      const putRes = await fetch(url, {
        method: "PUT",
        headers: { Authorization: `token ${token}`, "Content-Type": "application/json" },
        body: JSON.stringify({ message: `Add deletion plan for ${filePath}`, content: base64Content, sha: sha })
      });

      if (!putRes.ok) {
        const err = await putRes.json();
        throw new Error(`Êó†Ê≥ïÊõ¥Êñ∞ ${pendingDeletionFileName}: ${putRes.status} - ${err.message || putRes.statusText}`);
      }
    }

    async function updateTransferFile(text, token) {
      const filePath = "Notes/transfer.txt";
      const url = `https://api.github.com/repos/${GITHUB_USERNAME}/${GITHUB_REPO}/contents/${filePath}`;
      let sha = transferTxtSHA;

      if (!sha) {
          try {
            const res = await fetch(url, { headers: { Authorization: `token ${token}` } });
            if (res.ok) {
                const data = await res.json();
                sha = data.sha;
                transferTxtSHA = data.sha;
            } else if (res.status === 404) {
                sha = null;
            } else {
                throw new Error(`Failed to check existing ${filePath}: ${res.status}`);
            }
          } catch (e) {
              console.error("Error checking transfer.txt SHA:", e);
              sha = null;
          }
      }

      const base64Content = btoa(unescape(encodeURIComponent(text)));
      const putRes = await fetch(url, {
        method: "PUT",
        headers: { Authorization: `token ${token}`, "Content-Type": "application/json" },
        body: JSON.stringify({ message: text ? `Update ${filePath}` : `Clear ${filePath}`, content: base64Content, sha: sha })
      });

      if (!putRes.ok) {
          const err = await putRes.json();
          throw new Error(`${putRes.status} - ${err.message || putRes.statusText}`);
      }
      const data = await putRes.json();
      transferTxtSHA = data.content.sha;
    }

    function debounce(fn, delay) {
      let timer = null;
      return function (...args) {
        clearTimeout(timer);
        document.getElementById("savingStatus").textContent = "üíæ ‰øùÂ≠ò‰∏≠...";
        timer = setTimeout(() => {
          fn.apply(this, args);
          document.getElementById("savingStatus").textContent = "";
        }, delay);
      };
    }

    document.getElementById("transferContent").addEventListener("input", debounce(async function () {
      try {
        await updateTransferFile(this.value, getToken());
      } catch (e) {
        document.getElementById("savingStatus").textContent = "‚ùå Ëá™Âä®‰øùÂ≠òÂ§±Ë¥•";
        console.error("Auto-save failed:", e);
      }
    }, 800));

    async function loadTransfer() {
      try {
        const token = getToken();
        const url = `https://api.github.com/repos/${GITHUB_USERNAME}/${GITHUB_REPO}/contents/Notes/transfer.txt`;
        const res = await fetch(url, { headers: { Authorization: `token ${token}` } });
        if (!res.ok) {
          if (res.status === 404) {
            document.getElementById("transferContent").value = "";
            return;
          }
          throw new Error(`${res.status}`);
        }
        const data = await res.json();
        transferTxtSHA = data.sha;
        document.getElementById("transferContent").value = decodeURIComponent(escape(atob(data.content.replace(/\n/g, ""))));
      } catch (err) {
        document.getElementById("log").textContent = "‚ö†Ô∏è Ëé∑Âèñ Notes/transfer.txt Â§±Ë¥•Ôºö" + err.message + ". ËØ∑Á°Æ‰øùÊñá‰ª∂Â≠òÂú®ÊàñËæìÂÖ•Ê≠£Á°ÆÁöÑ Token„ÄÇ";
      }
    }

    function copyTransfer() {
      navigator.clipboard.writeText(document.getElementById("transferContent").value)
        .then(() => document.getElementById("log").textContent = "üìã transfer.txt ÂÜÖÂÆπÂ∑≤Â§çÂà∂")
        .catch(err => document.getElementById("log").textContent = "‚ùå Â§çÂà∂Â§±Ë¥•Ôºö" + err.message);
    }
  </script>
</body>
</html>
